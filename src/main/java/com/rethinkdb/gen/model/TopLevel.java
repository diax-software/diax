// Autogenerated by metajava.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../../../../templates/TopLevel.java

package com.rethinkdb.gen.model;

import com.rethinkdb.ast.Util;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.gen.ast.Error;
import com.rethinkdb.gen.exc.ReqlDriverError;
import com.rethinkdb.model.Arguments;
import com.rethinkdb.model.MapObject;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@SuppressWarnings({"unchecked", "SameParameterValue"})
public class TopLevel {
    public Add add(Object expr, Object... exprs) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAddAll(exprs);
        return new Add(args);
    }

    public And and(Object... exprs) {
        Arguments args = new Arguments();
        args.coerceAndAddAll(exprs);
        return new And(args);
    }

    public April april() {
        Arguments args = new Arguments();
        return new April(args);
    }

    public Args args(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new Args(args);
    }

    public List array(Object val0, Object... vals) {
        List res = new ArrayList();
        res.add(val0);
        res.addAll(Arrays.asList(vals));
        return res;
    }

    public List array(ReqlFunction0 val0, ReqlFunction0... vals) {
        List res = new ArrayList();
        res.add(val0);
        res.addAll(Arrays.asList(vals));
        return res;
    }

    public List array(ReqlFunction1 val0, ReqlFunction1... vals) {
        List res = new ArrayList();
        res.add(val0);
        res.addAll(Arrays.asList(vals));
        return res;
    }

    public List array(ReqlFunction2 val0, ReqlFunction2... vals) {
        List res = new ArrayList();
        res.add(val0);
        res.addAll(Arrays.asList(vals));
        return res;
    }

    public List array(ReqlFunction3 val0, ReqlFunction3... vals) {
        List res = new ArrayList();
        res.add(val0);
        res.addAll(Arrays.asList(vals));
        return res;
    }

    public List array(ReqlFunction4 val0, ReqlFunction4... vals) {
        List res = new ArrayList();
        res.add(val0);
        res.addAll(Arrays.asList(vals));
        return res;
    }

    public List array() {
        return new ArrayList();
    }

    public Asc asc(Javascript js) {
        Arguments args = new Arguments();
        args.coerceAndAdd(js);
        return new Asc(args);
    }

    public Asc asc(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new Asc(args);
    }

    public Asc asc(ReqlFunction1 func1) {
        Arguments args = new Arguments();
        args.coerceAndAdd(func1);
        return new Asc(args);
    }

    public August august() {
        Arguments args = new Arguments();
        return new August(args);
    }

    public Avg avg(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new Avg(args);
    }

    public Avg avg(Object expr, Javascript js) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        return new Avg(args);
    }

    public Avg avg(Object expr, Object exprA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        return new Avg(args);
    }

    public Avg avg(Object expr, ReqlFunction1 func1) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        return new Avg(args);
    }

    public Binary binary(Object expr) {

        if (expr instanceof byte[]) {
            return new Binary((byte[]) expr);
        } else {
            Arguments args = new Arguments();
            args.coerceAndAdd(expr);
            return new Binary(args);
        }
    }

    public Branch branch(Object expr, Object exprA, Object exprB, Object... exprs) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAddAll(exprs);
        return new Branch(args);
    }

    public Ceil ceil(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new Ceil(args);
    }

    public Circle circle(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new Circle(args);
    }

    public Circle circle(Object expr, Object exprA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        return new Circle(args);
    }

    public Circle circle(Object expr, Object exprA, Object exprB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        return new Circle(args);
    }

    public Contains contains(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new Contains(args);
    }

    public Contains contains(Object expr, Javascript js) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        return new Contains(args);
    }

    public Contains contains(Object expr, Javascript js, Javascript jsA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        args.coerceAndAdd(jsA);
        return new Contains(args);
    }

    public Contains contains(Object expr, Javascript js, Javascript jsA, Javascript jsB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        args.coerceAndAdd(jsA);
        args.coerceAndAdd(jsB);
        return new Contains(args);
    }

    public Contains contains(Object expr, Javascript js, Javascript jsA, Javascript jsB, Javascript jsC) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        args.coerceAndAdd(jsA);
        args.coerceAndAdd(jsB);
        args.coerceAndAdd(jsC);
        return new Contains(args);
    }

    public Contains contains(Object expr, Javascript js, Javascript jsA, Javascript jsB, Object exprA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        args.coerceAndAdd(jsA);
        args.coerceAndAdd(jsB);
        args.coerceAndAdd(exprA);
        return new Contains(args);
    }

    public Contains contains(Object expr, Javascript js, Javascript jsA, Object exprA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        args.coerceAndAdd(jsA);
        args.coerceAndAdd(exprA);
        return new Contains(args);
    }

    public Contains contains(Object expr, Javascript js, Javascript jsA, Object exprA, Javascript jsB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        args.coerceAndAdd(jsA);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(jsB);
        return new Contains(args);
    }

    public Contains contains(Object expr, Javascript js, Javascript jsA, Object exprA, Object exprB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        args.coerceAndAdd(jsA);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        return new Contains(args);
    }

    public Contains contains(Object expr, Javascript js, Object exprA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        args.coerceAndAdd(exprA);
        return new Contains(args);
    }

    public Contains contains(Object expr, Javascript js, Object exprA, Javascript jsA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(jsA);
        return new Contains(args);
    }

    public Contains contains(Object expr, Javascript js, Object exprA, Javascript jsA, Javascript jsB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(jsA);
        args.coerceAndAdd(jsB);
        return new Contains(args);
    }

    public Contains contains(Object expr, Javascript js, Object exprA, Javascript jsA, Object exprB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(jsA);
        args.coerceAndAdd(exprB);
        return new Contains(args);
    }

    public Contains contains(Object expr, Javascript js, Object exprA, Object exprB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        return new Contains(args);
    }

    public Contains contains(Object expr, Javascript js, Object exprA, Object exprB, Javascript jsA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(jsA);
        return new Contains(args);
    }

    public Contains contains(Object expr, Javascript js, Object exprA, Object exprB, Object exprC) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(exprC);
        return new Contains(args);
    }

    public Contains contains(Object expr, Object exprA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        return new Contains(args);
    }

    public Contains contains(Object expr, Object exprA, Javascript js) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(js);
        return new Contains(args);
    }

    public Contains contains(Object expr, Object exprA, Javascript js, Javascript jsA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(js);
        args.coerceAndAdd(jsA);
        return new Contains(args);
    }

    public Contains contains(Object expr, Object exprA, Javascript js, Javascript jsA, Javascript jsB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(js);
        args.coerceAndAdd(jsA);
        args.coerceAndAdd(jsB);
        return new Contains(args);
    }

    public Contains contains(Object expr, Object exprA, Javascript js, Javascript jsA, Object exprB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(js);
        args.coerceAndAdd(jsA);
        args.coerceAndAdd(exprB);
        return new Contains(args);
    }

    public Contains contains(Object expr, Object exprA, Javascript js, Object exprB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(js);
        args.coerceAndAdd(exprB);
        return new Contains(args);
    }

    public Contains contains(Object expr, Object exprA, Javascript js, Object exprB, Javascript jsA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(js);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(jsA);
        return new Contains(args);
    }

    public Contains contains(Object expr, Object exprA, Javascript js, Object exprB, Object exprC) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(js);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(exprC);
        return new Contains(args);
    }

    public Contains contains(Object expr, Object exprA, Object exprB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        return new Contains(args);
    }

    public Contains contains(Object expr, Object exprA, Object exprB, Javascript js) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(js);
        return new Contains(args);
    }

    public Contains contains(Object expr, Object exprA, Object exprB, Javascript js, Javascript jsA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(js);
        args.coerceAndAdd(jsA);
        return new Contains(args);
    }

    public Contains contains(Object expr, Object exprA, Object exprB, Javascript js, Object exprC) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(js);
        args.coerceAndAdd(exprC);
        return new Contains(args);
    }

    public Contains contains(Object expr, Object exprA, Object exprB, Object exprC) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(exprC);
        return new Contains(args);
    }

    public Contains contains(Object expr, Object exprA, Object exprB, Object exprC, Javascript js) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(exprC);
        args.coerceAndAdd(js);
        return new Contains(args);
    }

    public Contains contains(Object expr, Object exprA, Object exprB, Object exprC, Object exprD) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(exprC);
        args.coerceAndAdd(exprD);
        return new Contains(args);
    }

    public Contains contains(Object expr, Object exprA, Object exprB, Object exprC, ReqlFunction1 func1) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(exprC);
        args.coerceAndAdd(func1);
        return new Contains(args);
    }

    public Contains contains(Object expr, Object exprA, Object exprB, ReqlFunction1 func1) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(func1);
        return new Contains(args);
    }

    public Contains contains(Object expr, Object exprA, Object exprB, ReqlFunction1 func1, Object exprC) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(exprC);
        return new Contains(args);
    }

    public Contains contains(Object expr, Object exprA, Object exprB, ReqlFunction1 func1, ReqlFunction1 func1A) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(func1A);
        return new Contains(args);
    }

    public Contains contains(Object expr, Object exprA, ReqlFunction1 func1) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(func1);
        return new Contains(args);
    }

    public Contains contains(Object expr, Object exprA, ReqlFunction1 func1, Object exprB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(exprB);
        return new Contains(args);
    }

    public Contains contains(Object expr, Object exprA, ReqlFunction1 func1, Object exprB, Object exprC) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(exprC);
        return new Contains(args);
    }

    public Contains contains(Object expr, Object exprA, ReqlFunction1 func1, Object exprB, ReqlFunction1 func1A) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(func1A);
        return new Contains(args);
    }

    public Contains contains(Object expr, Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(func1A);
        return new Contains(args);
    }

    public Contains contains(Object expr, Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(func1A);
        args.coerceAndAdd(exprB);
        return new Contains(args);
    }

    public Contains contains(Object expr, Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(func1A);
        args.coerceAndAdd(func1B);
        return new Contains(args);
    }

    public Contains contains(Object expr, ReqlFunction1 func1) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        return new Contains(args);
    }

    public Contains contains(Object expr, ReqlFunction1 func1, Object exprA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(exprA);
        return new Contains(args);
    }

    public Contains contains(Object expr, ReqlFunction1 func1, Object exprA, Object exprB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        return new Contains(args);
    }

    public Contains contains(Object expr, ReqlFunction1 func1, Object exprA, Object exprB, Object exprC) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(exprC);
        return new Contains(args);
    }

    public Contains contains(Object expr, ReqlFunction1 func1, Object exprA, Object exprB, ReqlFunction1 func1A) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(func1A);
        return new Contains(args);
    }

    public Contains contains(Object expr, ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(func1A);
        return new Contains(args);
    }

    public Contains contains(Object expr, ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, Object exprB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(func1A);
        args.coerceAndAdd(exprB);
        return new Contains(args);
    }

    public Contains contains(Object expr, ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, ReqlFunction1 func1B) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(func1A);
        args.coerceAndAdd(func1B);
        return new Contains(args);
    }

    public Contains contains(Object expr, ReqlFunction1 func1, ReqlFunction1 func1A) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(func1A);
        return new Contains(args);
    }

    public Contains contains(Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(func1A);
        args.coerceAndAdd(exprA);
        return new Contains(args);
    }

    public Contains contains(Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, Object exprB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(func1A);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        return new Contains(args);
    }

    public Contains contains(Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, ReqlFunction1 func1B) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(func1A);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(func1B);
        return new Contains(args);
    }

    public Contains contains(Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(func1A);
        args.coerceAndAdd(func1B);
        return new Contains(args);
    }

    public Contains contains(Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, Object exprA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(func1A);
        args.coerceAndAdd(func1B);
        args.coerceAndAdd(exprA);
        return new Contains(args);
    }

    public Contains contains(Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, ReqlFunction1 func1C) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(func1A);
        args.coerceAndAdd(func1B);
        args.coerceAndAdd(func1C);
        return new Contains(args);
    }

    public Count count(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new Count(args);
    }

    public Count count(Object expr, Javascript js) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        return new Count(args);
    }

    public Count count(Object expr, Object exprA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        return new Count(args);
    }

    public Count count(Object expr, ReqlFunction1 func1) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        return new Count(args);
    }

    public Db db(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new Db(args);
    }

    public DbCreate dbCreate(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new DbCreate(args);
    }

    public DbDrop dbDrop(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new DbDrop(args);
    }

    public DbList dbList() {
        Arguments args = new Arguments();
        return new DbList(args);
    }

    public December december() {
        Arguments args = new Arguments();
        return new December(args);
    }

    public Desc desc(Javascript js) {
        Arguments args = new Arguments();
        args.coerceAndAdd(js);
        return new Desc(args);
    }

    public Desc desc(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new Desc(args);
    }

    public Desc desc(ReqlFunction1 func1) {
        Arguments args = new Arguments();
        args.coerceAndAdd(func1);
        return new Desc(args);
    }

    public Distance distance(Object expr, Object exprA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        return new Distance(args);
    }

    public Distinct distinct(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new Distinct(args);
    }

    public Div div(Object expr, Object... exprs) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAddAll(exprs);
        return new Div(args);
    }

    public Funcall do_(Javascript js) {
        Arguments args = new Arguments();
        args.coerceAndAdd(js);
        return new Funcall(args);
    }

    public Funcall do_(Object expr, Javascript js) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        return new Funcall(args);
    }

    public Funcall do_(Object expr, Object exprA, Javascript js) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(js);
        return new Funcall(args);
    }

    public Funcall do_(Object expr, Object exprA, Object exprB, Javascript js) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(js);
        return new Funcall(args);
    }

    public Funcall do_(Object expr, Object exprA, Object exprB, ReqlFunction3 func3) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(func3);
        return new Funcall(args);
    }

    public Funcall do_(Object expr, Object exprA, ReqlFunction2 func2) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(func2);
        return new Funcall(args);
    }

    public Funcall do_(Object expr, Object... exprs) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAddAll(exprs);
        return new Funcall(args);
    }

    public Funcall do_(Object expr, ReqlFunction1 func1) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        return new Funcall(args);
    }

    public Funcall do_(ReqlFunction0 func0) {
        Arguments args = new Arguments();
        args.coerceAndAdd(func0);
        return new Funcall(args);
    }

    public EpochTime epochTime(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new EpochTime(args);
    }

    public Eq eq(Object expr, Object exprA, Object... exprs) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAddAll(exprs);
        return new Eq(args);
    }

    public Error error() {
        Arguments args = new Arguments();
        return new Error(args);
    }

    public Error error(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new Error(args);
    }

    public ReqlExpr expr(Object value) {
        return Util.toReqlExpr(value);
    }

    public February february() {
        Arguments args = new Arguments();
        return new February(args);
    }

    public Floor floor(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new Floor(args);
    }

    public Fold fold(Object expr, Object exprA, Javascript js) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(js);
        return new Fold(args);
    }

    public Fold fold(Object expr, Object exprA, ReqlFunction2 func2) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(func2);
        return new Fold(args);
    }

    public Friday friday() {
        Arguments args = new Arguments();
        return new Friday(args);
    }

    public Ge ge(Object expr, Object exprA, Object... exprs) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAddAll(exprs);
        return new Ge(args);
    }

    public Geojson geojson(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new Geojson(args);
    }

    public Grant grant(Object expr, Object exprA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        return new Grant(args);
    }

    public Group group(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new Group(args);
    }

    public Group group(Object expr, Javascript js) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        return new Group(args);
    }

    public Group group(Object expr, Javascript js, Javascript jsA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        args.coerceAndAdd(jsA);
        return new Group(args);
    }

    public Group group(Object expr, Javascript js, Javascript jsA, Javascript jsB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        args.coerceAndAdd(jsA);
        args.coerceAndAdd(jsB);
        return new Group(args);
    }

    public Group group(Object expr, Javascript js, Javascript jsA, Javascript jsB, Javascript jsC) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        args.coerceAndAdd(jsA);
        args.coerceAndAdd(jsB);
        args.coerceAndAdd(jsC);
        return new Group(args);
    }

    public Group group(Object expr, Javascript js, Javascript jsA, Javascript jsB, Object exprA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        args.coerceAndAdd(jsA);
        args.coerceAndAdd(jsB);
        args.coerceAndAdd(exprA);
        return new Group(args);
    }

    public Group group(Object expr, Javascript js, Javascript jsA, Object exprA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        args.coerceAndAdd(jsA);
        args.coerceAndAdd(exprA);
        return new Group(args);
    }

    public Group group(Object expr, Javascript js, Javascript jsA, Object exprA, Javascript jsB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        args.coerceAndAdd(jsA);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(jsB);
        return new Group(args);
    }

    public Group group(Object expr, Javascript js, Javascript jsA, Object exprA, Object exprB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        args.coerceAndAdd(jsA);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        return new Group(args);
    }

    public Group group(Object expr, Javascript js, Object exprA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        args.coerceAndAdd(exprA);
        return new Group(args);
    }

    public Group group(Object expr, Javascript js, Object exprA, Javascript jsA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(jsA);
        return new Group(args);
    }

    public Group group(Object expr, Javascript js, Object exprA, Javascript jsA, Javascript jsB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(jsA);
        args.coerceAndAdd(jsB);
        return new Group(args);
    }

    public Group group(Object expr, Javascript js, Object exprA, Javascript jsA, Object exprB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(jsA);
        args.coerceAndAdd(exprB);
        return new Group(args);
    }

    public Group group(Object expr, Javascript js, Object exprA, Object exprB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        return new Group(args);
    }

    public Group group(Object expr, Javascript js, Object exprA, Object exprB, Javascript jsA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(jsA);
        return new Group(args);
    }

    public Group group(Object expr, Javascript js, Object exprA, Object exprB, Object exprC) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(exprC);
        return new Group(args);
    }

    public Group group(Object expr, Object exprA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        return new Group(args);
    }

    public Group group(Object expr, Object exprA, Javascript js) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(js);
        return new Group(args);
    }

    public Group group(Object expr, Object exprA, Javascript js, Javascript jsA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(js);
        args.coerceAndAdd(jsA);
        return new Group(args);
    }

    public Group group(Object expr, Object exprA, Javascript js, Javascript jsA, Javascript jsB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(js);
        args.coerceAndAdd(jsA);
        args.coerceAndAdd(jsB);
        return new Group(args);
    }

    public Group group(Object expr, Object exprA, Javascript js, Javascript jsA, Object exprB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(js);
        args.coerceAndAdd(jsA);
        args.coerceAndAdd(exprB);
        return new Group(args);
    }

    public Group group(Object expr, Object exprA, Javascript js, Object exprB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(js);
        args.coerceAndAdd(exprB);
        return new Group(args);
    }

    public Group group(Object expr, Object exprA, Javascript js, Object exprB, Javascript jsA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(js);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(jsA);
        return new Group(args);
    }

    public Group group(Object expr, Object exprA, Javascript js, Object exprB, Object exprC) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(js);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(exprC);
        return new Group(args);
    }

    public Group group(Object expr, Object exprA, Object exprB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        return new Group(args);
    }

    public Group group(Object expr, Object exprA, Object exprB, Javascript js) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(js);
        return new Group(args);
    }

    public Group group(Object expr, Object exprA, Object exprB, Javascript js, Javascript jsA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(js);
        args.coerceAndAdd(jsA);
        return new Group(args);
    }

    public Group group(Object expr, Object exprA, Object exprB, Javascript js, Object exprC) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(js);
        args.coerceAndAdd(exprC);
        return new Group(args);
    }

    public Group group(Object expr, Object exprA, Object exprB, Object exprC) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(exprC);
        return new Group(args);
    }

    public Group group(Object expr, Object exprA, Object exprB, Object exprC, Javascript js) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(exprC);
        args.coerceAndAdd(js);
        return new Group(args);
    }

    public Group group(Object expr, Object exprA, Object exprB, Object exprC, Object exprD) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(exprC);
        args.coerceAndAdd(exprD);
        return new Group(args);
    }

    public Group group(Object expr, Object exprA, Object exprB, Object exprC, ReqlFunction1 func1) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(exprC);
        args.coerceAndAdd(func1);
        return new Group(args);
    }

    public Group group(Object expr, Object exprA, Object exprB, ReqlFunction1 func1) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(func1);
        return new Group(args);
    }

    public Group group(Object expr, Object exprA, Object exprB, ReqlFunction1 func1, Object exprC) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(exprC);
        return new Group(args);
    }

    public Group group(Object expr, Object exprA, Object exprB, ReqlFunction1 func1, ReqlFunction1 func1A) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(func1A);
        return new Group(args);
    }

    public Group group(Object expr, Object exprA, ReqlFunction1 func1) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(func1);
        return new Group(args);
    }

    public Group group(Object expr, Object exprA, ReqlFunction1 func1, Object exprB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(exprB);
        return new Group(args);
    }

    public Group group(Object expr, Object exprA, ReqlFunction1 func1, Object exprB, Object exprC) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(exprC);
        return new Group(args);
    }

    public Group group(Object expr, Object exprA, ReqlFunction1 func1, Object exprB, ReqlFunction1 func1A) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(func1A);
        return new Group(args);
    }

    public Group group(Object expr, Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(func1A);
        return new Group(args);
    }

    public Group group(Object expr, Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(func1A);
        args.coerceAndAdd(exprB);
        return new Group(args);
    }

    public Group group(Object expr, Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(func1A);
        args.coerceAndAdd(func1B);
        return new Group(args);
    }

    public Group group(Object expr, ReqlFunction1 func1) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        return new Group(args);
    }

    public Group group(Object expr, ReqlFunction1 func1, Object exprA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(exprA);
        return new Group(args);
    }

    public Group group(Object expr, ReqlFunction1 func1, Object exprA, Object exprB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        return new Group(args);
    }

    public Group group(Object expr, ReqlFunction1 func1, Object exprA, Object exprB, Object exprC) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(exprC);
        return new Group(args);
    }

    public Group group(Object expr, ReqlFunction1 func1, Object exprA, Object exprB, ReqlFunction1 func1A) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(func1A);
        return new Group(args);
    }

    public Group group(Object expr, ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(func1A);
        return new Group(args);
    }

    public Group group(Object expr, ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, Object exprB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(func1A);
        args.coerceAndAdd(exprB);
        return new Group(args);
    }

    public Group group(Object expr, ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, ReqlFunction1 func1B) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(func1A);
        args.coerceAndAdd(func1B);
        return new Group(args);
    }

    public Group group(Object expr, ReqlFunction1 func1, ReqlFunction1 func1A) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(func1A);
        return new Group(args);
    }

    public Group group(Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(func1A);
        args.coerceAndAdd(exprA);
        return new Group(args);
    }

    public Group group(Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, Object exprB) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(func1A);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        return new Group(args);
    }

    public Group group(Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, ReqlFunction1 func1B) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(func1A);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(func1B);
        return new Group(args);
    }

    public Group group(Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(func1A);
        args.coerceAndAdd(func1B);
        return new Group(args);
    }

    public Group group(Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, Object exprA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(func1A);
        args.coerceAndAdd(func1B);
        args.coerceAndAdd(exprA);
        return new Group(args);
    }

    public Group group(Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, ReqlFunction1 func1C) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        args.coerceAndAdd(func1A);
        args.coerceAndAdd(func1B);
        args.coerceAndAdd(func1C);
        return new Group(args);
    }

    public Gt gt(Object expr, Object exprA, Object... exprs) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAddAll(exprs);
        return new Gt(args);
    }

    public MapObject<Object, Object> hashMap(Object key, Object val) {
        return new MapObject<>().with(key, val);
    }

    public MapObject<Object, Object> hashMap() {
        return new MapObject<>();
    }

    public Http http(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new Http(args);
    }

    public Info info(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new Info(args);
    }

    public Intersects intersects(Object expr, Object exprA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        return new Intersects(args);
    }

    public Iso8601 iso8601(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new Iso8601(args);
    }

    public January january() {
        Arguments args = new Arguments();
        return new January(args);
    }

    public Javascript js(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new Javascript(args);
    }

    public Json json(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new Json(args);
    }

    public July july() {
        Arguments args = new Arguments();
        return new July(args);
    }

    public June june() {
        Arguments args = new Arguments();
        return new June(args);
    }

    public Le le(Object expr, Object exprA, Object... exprs) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAddAll(exprs);
        return new Le(args);
    }

    public Line line(Object expr, Object exprA, Object... exprs) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAddAll(exprs);
        return new Line(args);
    }

    public Literal literal() {
        Arguments args = new Arguments();
        return new Literal(args);
    }

    public Literal literal(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new Literal(args);
    }

    public Lt lt(Object expr, Object exprA, Object... exprs) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAddAll(exprs);
        return new Lt(args);
    }

    public Map map(Object expr, Javascript js) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        return new Map(args);
    }

    public Map map(Object expr, Object exprA, Javascript js) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(js);
        return new Map(args);
    }

    public Map map(Object expr, Object exprA, Object exprB, Javascript js) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(js);
        return new Map(args);
    }

    public Map map(Object expr, Object exprA, Object exprB, Object exprC, Javascript js) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(exprC);
        args.coerceAndAdd(js);
        return new Map(args);
    }

    public Map map(Object expr, Object exprA, Object exprB, Object exprC, ReqlFunction4 func4) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(exprC);
        args.coerceAndAdd(func4);
        return new Map(args);
    }

    public Map map(Object expr, Object exprA, Object exprB, ReqlFunction3 func3) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(func3);
        return new Map(args);
    }

    public Map map(Object expr, Object exprA, ReqlFunction2 func2) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(func2);
        return new Map(args);
    }

    public Map map(Object expr, ReqlFunction0 func0) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func0);
        return new Map(args);
    }

    public Map map(Object expr, ReqlFunction1 func1) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        return new Map(args);
    }

    public March march() {
        Arguments args = new Arguments();
        return new March(args);
    }

    public Max max(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new Max(args);
    }

    public Max max(Object expr, Javascript js) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        return new Max(args);
    }

    public Max max(Object expr, Object exprA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        return new Max(args);
    }

    public Max max(Object expr, ReqlFunction1 func1) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        return new Max(args);
    }

    public Maxval maxval() {
        Arguments args = new Arguments();
        return new Maxval(args);
    }

    public May may() {
        Arguments args = new Arguments();
        return new May(args);
    }

    public Min min(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new Min(args);
    }

    public Min min(Object expr, Javascript js) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        return new Min(args);
    }

    public Min min(Object expr, Object exprA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        return new Min(args);
    }

    public Min min(Object expr, ReqlFunction1 func1) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        return new Min(args);
    }

    public Minval minval() {
        Arguments args = new Arguments();
        return new Minval(args);
    }

    public Mod mod(Object expr, Object exprA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        return new Mod(args);
    }

    public Monday monday() {
        Arguments args = new Arguments();
        return new Monday(args);
    }

    public Mul mul(Object expr, Object... exprs) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAddAll(exprs);
        return new Mul(args);
    }

    public Ne ne(Object expr, Object exprA, Object... exprs) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAddAll(exprs);
        return new Ne(args);
    }

    public Not not(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new Not(args);
    }

    public November november() {
        Arguments args = new Arguments();
        return new November(args);
    }

    public Now now() {
        Arguments args = new Arguments();
        return new Now(args);
    }

    public ReqlObject object(Object... exprs) {
        Arguments args = new Arguments();
        args.coerceAndAddAll(exprs);
        return new ReqlObject(args);
    }

    public October october() {
        Arguments args = new Arguments();
        return new October(args);
    }

    public Or or(Object... exprs) {
        Arguments args = new Arguments();
        args.coerceAndAddAll(exprs);
        return new Or(args);
    }

    public Point point(Object expr, Object exprA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        return new Point(args);
    }

    public Polygon polygon(Object expr, Object exprA, Object exprB, Object... exprs) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAddAll(exprs);
        return new Polygon(args);
    }

    public Random random() {
        Arguments args = new Arguments();
        return new Random(args);
    }

    public Random random(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new Random(args);
    }

    public Random random(Object expr, Object exprA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        return new Random(args);
    }

    public Range range() {
        Arguments args = new Arguments();
        return new Range(args);
    }

    public Range range(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new Range(args);
    }

    public Range range(Object expr, Object exprA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        return new Range(args);
    }

    public Reduce reduce(Object expr, Javascript js) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        return new Reduce(args);
    }

    public Reduce reduce(Object expr, ReqlFunction2 func2) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func2);
        return new Reduce(args);
    }

    public Round round(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new Round(args);
    }

    public ReqlExpr row(Object... values) {
        throw new ReqlDriverError("r.row is not implemented in the Java driver." +
            " Use lambda syntax instead");
    }

    public Saturday saturday() {
        Arguments args = new Arguments();
        return new Saturday(args);
    }

    public September september() {
        Arguments args = new Arguments();
        return new September(args);
    }

    public Sub sub(Object expr, Object... exprs) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAddAll(exprs);
        return new Sub(args);
    }

    public Sum sum(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new Sum(args);
    }

    public Sum sum(Object expr, Javascript js) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(js);
        return new Sum(args);
    }

    public Sum sum(Object expr, Object exprA) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        return new Sum(args);
    }

    public Sum sum(Object expr, ReqlFunction1 func1) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(func1);
        return new Sum(args);
    }

    public Sunday sunday() {
        Arguments args = new Arguments();
        return new Sunday(args);
    }

    public Table table(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new Table(args);
    }

    public TableCreate tableCreate(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new TableCreate(args);
    }

    public TableDrop tableDrop(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new TableDrop(args);
    }

    public TableList tableList() {
        Arguments args = new Arguments();
        return new TableList(args);
    }

    public Thursday thursday() {
        Arguments args = new Arguments();
        return new Thursday(args);
    }

    public Time time(Object expr, Object exprA, Object exprB, Object exprC) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(exprC);
        return new Time(args);
    }

    public Time time(Object expr, Object exprA, Object exprB, Object exprC, Object exprD, Object exprE, Object exprF) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAdd(exprA);
        args.coerceAndAdd(exprB);
        args.coerceAndAdd(exprC);
        args.coerceAndAdd(exprD);
        args.coerceAndAdd(exprE);
        args.coerceAndAdd(exprF);
        return new Time(args);
    }

    public Tuesday tuesday() {
        Arguments args = new Arguments();
        return new Tuesday(args);
    }

    public TypeOf typeOf(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new TypeOf(args);
    }

    public Union union(Object expr, Object... exprs) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        args.coerceAndAddAll(exprs);
        return new Union(args);
    }

    public Uuid uuid() {
        Arguments args = new Arguments();
        return new Uuid(args);
    }

    public Uuid uuid(Object expr) {
        Arguments args = new Arguments();
        args.coerceAndAdd(expr);
        return new Uuid(args);
    }

    public Wednesday wednesday() {
        Arguments args = new Arguments();
        return new Wednesday(args);
    }
}
